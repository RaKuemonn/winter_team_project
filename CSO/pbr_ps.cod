//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 view_projection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 view_rotate;    // Offset:   64 Size:    64 [unused]
//   float4 camera_position;            // Offset:  128 Size:    16
//   float4 timer;                      // Offset:  144 Size:    16 [unused]
//
// }
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   float4 ambient_color;              // Offset:    0 Size:    16 [unused]
//   float4 light_direction;            // Offset:   16 Size:    16
//   float4 light_radiance;             // Offset:   32 Size:    16
//   float4 light_color;                // Offset:   48 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[1]                 sampler      NA          NA             s1      1 
// sampler_states[2]                 sampler      NA          NA             s2      1 
// albedo_texture                    texture  float4          2d             t0      1 
// normal_texture                    texture  float4          2d             t1      1 
// metalness_texture                 texture  float4          2d             t2      1 
// roughness_texture                 texture  float4          2d             t3      1 
// specular_texture                  texture  float4        cube             t4      1 
// irradiance_texture                texture  float4        cube             t5      1 
// specular_brdf_lut                 texture  float4          2d             t6      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// BINORMAL                 0   xyzw        3     NONE   float   xyz 
// TANGENT                  0   xyzw        4     NONE   float   xyz 
// TEXCOORD                 0   xy          5     NONE   float   xy  
// TEXCOORD                 1   xyz         6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[9], immediateIndexed
dcl_constantbuffer CB2[3], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_output o0.xyzw
dcl_temps 12
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.world_position.x; v1.y <- pin.world_position.y; v1.z <- pin.world_position.z; v1.w <- pin.world_position.w; 
//   v2.x <- pin.world_normal.x; v2.y <- pin.world_normal.y; v2.z <- pin.world_normal.z; v2.w <- pin.world_normal.w; 
//   v3.x <- pin.world_binormal.x; v3.y <- pin.world_binormal.y; v3.z <- pin.world_binormal.z; v3.w <- pin.world_binormal.w; 
//   v4.x <- pin.world_tangent.x; v4.y <- pin.world_tangent.y; v4.z <- pin.world_tangent.z; v4.w <- pin.world_tangent.w; 
//   v5.x <- pin.texcoord.x; v5.y <- pin.texcoord.y; 
//   v6.x <- pin.shadow_texcoord.x; v6.y <- pin.shadow_texcoord.y; v6.z <- pin.shadow_texcoord.z; 
//   v7.x <- pin.color.x; v7.y <- pin.color.y; v7.z <- pin.color.z; v7.w <- pin.color.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 19 "C:\Users\2200259\Desktop\winter_team_project\Factolier\Shader\pbr_ps.hlsl"
mov r0.x, l(3.141592)  // r0.x <- pi

#line 20
mov r0.y, l(0.000010)  // r0.y <- epsilon

#line 23
mov r1.xyz, l(0.040000,0.040000,0.040000,0)  // r1.x <- f_dielectric.x; r1.y <- f_dielectric.y; r1.z <- f_dielectric.z

#line 70
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v5.xyxx, t0.xyzw, s2
mov r2.xyz, r2.xyzx  // r2.x <- albedo.x; r2.y <- albedo.y; r2.z <- albedo.z

#line 71
sample_indexable(texture2d)(float,float,float,float) r0.z, v5.xyxx, t2.yzxw, s2
mov r0.z, r0.z  // r0.z <- metalness

#line 72
sample_indexable(texture2d)(float,float,float,float) r3.x, v5.xyxx, t3.xyzw, s2  // r3.x <- roughness

#line 76
mov r4.xyz, -v1.xyzx
add r4.xyz, r4.xyzx, cb1[8].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx  // r4.x <- lo.x; r4.y <- lo.y; r4.z <- lo.z

#line 79
mov r5.x, v4.x  // r5.x <- tbn._m00
mov r6.x, v4.y  // r6.x <- tbn._m01
mov r7.x, v4.z  // r7.x <- tbn._m02
mov r5.y, v3.x  // r5.y <- tbn._m10
mov r6.y, v3.y  // r6.y <- tbn._m11
mov r8.x, v3.z  // r8.x <- tbn._m12
mov r8.yzw, v2.xxyz  // r8.y <- tbn._m20; r8.z <- tbn._m21; r8.w <- tbn._m22

#line 82
sample_indexable(texture2d)(float,float,float,float) r9.xyz, v5.xyxx, t1.xyzw, s2
mul r9.xyz, r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r10.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r9.xyz, r9.xyzx, r10.xyzx
dp3 r0.w, r9.xyzx, r9.xyzx
rsq r0.w, r0.w
mul r9.xyz, r0.wwww, r9.xyzx  // r9.x <- n.x; r9.y <- n.y; r9.z <- n.z

#line 83
mov r5.z, r8.y
dp3 r5.x, r9.xyzx, r5.xyzx
mov r6.z, r8.z
dp3 r5.y, r9.xyzx, r6.xyzx
mov r7.yz, r8.xxwx
dp3 r5.z, r9.xyzx, r7.xyzx
dp3 r0.w, r5.xyzx, r5.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- n.x; r5.y <- n.y; r5.z <- n.z

#line 86
dp3 r0.w, r5.xyzx, r4.xyzx
max r3.y, r0.w, l(0.000000)  // r3.y <- cos_lo

#line 89
mul r0.w, r3.y, l(2.000000)
mul r6.xyz, r5.xyzx, r0.wwww
mov r7.xyz, -r4.xyzx
add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- lr.x; r6.y <- lr.y; r6.z <- lr.z

#line 92
mov r7.xyz, -r1.xyzx
add r7.xyz, r2.xyzx, r7.xyzx
mul r7.xyz, r0.zzzz, r7.xyzx
add r1.xyz, r1.xyzx, r7.xyzx  // r1.x <- f0.x; r1.y <- f0.y; r1.z <- f0.z

#line 97
mov r7.xyz, l(0,0,0,0)  // r7.x <- direct_lighting.x; r7.y <- direct_lighting.y; r7.z <- direct_lighting.z

#line 99
mov r8.xyz, -cb2[1].xyzx  // r8.x <- li.x; r8.y <- li.y; r8.z <- li.z

#line 100
mov r9.xyz, cb2[2].xyzx  // r9.x <- l_radiance.x; r9.y <- l_radiance.y; r9.z <- l_radiance.z

#line 103
add r10.xyz, r4.xyzx, r8.xyzx
dp3 r0.w, r10.xyzx, r10.xyzx
rsq r0.w, r0.w
mul r10.xyz, r0.wwww, r10.xyzx  // r10.x <- lh.x; r10.y <- lh.y; r10.z <- lh.z

#line 106
dp3 r0.w, r5.xyzx, r8.xyzx
max r0.w, r0.w, l(0.000000)  // r0.w <- cos_li

#line 107
dp3 r1.w, r5.xyzx, r10.xyzx
max r1.w, r1.w, l(0.000000)  // r1.w <- cos_lh

#line 110
nop 
mov r1.xyz, r1.xyzx
dp3 r2.w, r10.xyzx, r4.xyzx
max r2.w, r2.w, l(0.000000)

#line 54
mov r4.xyz, -r1.xyzx
add r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r2.w, -r2.w
add r2.w, r2.w, l(1.000000)
mov r3.z, l(1.000000)
mul r3.z, r2.w, r3.z
mul r2.w, r2.w, r2.w
mul r2.w, r2.w, r2.w
mul r2.w, r2.w, r3.z
mul r4.xyz, r2.wwww, r4.xyzx
add r4.xyz, r1.xyzx, r4.xyzx  // r4.x <- <fresnel_schlick return value>.x; r4.y <- <fresnel_schlick return value>.y; r4.z <- <fresnel_schlick return value>.z

#line 110
mov r4.xyz, r4.xyzx  // r4.x <- f.x; r4.y <- f.y; r4.z <- f.z

#line 112
nop 
mov r1.w, r1.w
mov r3.x, r3.x

#line 30
mul r2.w, r3.x, r3.x  // r2.w <- alpha

#line 31
mul r2.w, r2.w, r2.w  // r2.w <- alpha_sq

#line 33
mul r1.w, r1.w, r1.w
mov r3.z, l(-1.000000)
add r3.z, r2.w, r3.z
mul r1.w, r1.w, r3.z
add r1.w, r1.w, l(1.000000)  // r1.w <- denom

#line 34
mul r0.x, r0.x, r1.w
mul r0.x, r1.w, r0.x
div r0.x, r2.w, r0.x  // r0.x <- <ndf_ggx return value>

#line 112
mov r0.x, r0.x  // r0.x <- d

#line 114
nop 
mov r0.w, r0.w
mov r1.w, r3.y
mov r3.x, r3.x

#line 46
add r2.w, r3.x, l(1.000000)  // r2.w <- r

#line 47
mul r2.w, r2.w, r2.w
div r2.w, r2.w, l(8.000000)  // r2.w <- k

#line 48
nop 
mov r0.w, r0.w
mov r2.w, r2.w

#line 40
mov r3.z, -r2.w
add r3.z, r3.z, l(1.000000)
mul r3.z, r0.w, r3.z
add r3.z, r2.w, r3.z
div r3.z, r0.w, r3.z  // r3.z <- <ga_schlick_g1 return value>

#line 48
nop 
mov r1.w, r1.w

#line 40
mov r3.w, -r2.w
add r3.w, r3.w, l(1.000000)
mul r3.w, r1.w, r3.w
add r2.w, r2.w, r3.w
div r2.w, r1.w, r2.w  // r2.w <- <ga_schlick_g1 return value>

#line 48
mul r2.w, r2.w, r3.z  // r2.w <- <ga_schlick_ggx return value>

#line 114
mov r2.w, r2.w  // r2.w <- g

#line 119
itof r8.xyz, l(1, 1, 1, 0)
mov r10.xyz, -r4.xyzx
add r8.xyz, r8.xyzx, r10.xyzx
itof r10.xyz, l(0, 0, 0, 0)
mov r11.xyz, -r8.xyzx
add r10.xyz, r10.xyzx, r11.xyzx
mul r10.xyz, r0.zzzz, r10.xyzx
add r8.xyz, r8.xyzx, r10.xyzx  // r8.x <- kd.x; r8.y <- kd.y; r8.z <- kd.z

#line 124
mul r8.xyz, r2.xyzx, r8.xyzx  // r8.x <- diffuse_brdf.x; r8.y <- diffuse_brdf.y; r8.z <- diffuse_brdf.z

#line 127
mul r4.xyz, r0.xxxx, r4.xyzx
mul r4.xyz, r2.wwww, r4.xyzx
mul r0.x, r0.w, l(4.000000)
mul r0.x, r1.w, r0.x
max r0.x, r0.x, r0.y
div r4.xyz, r4.xyzx, r0.xxxx  // r4.x <- specular_brdf.x; r4.y <- specular_brdf.y; r4.z <- specular_brdf.z

#line 130
add r4.xyz, r4.xyzx, r8.xyzx
mul r4.xyz, r9.xyzx, r4.xyzx
mul r0.xyw, r0.wwww, r4.xyxz
add r0.xyw, r0.xyxw, r7.xyxz  // r0.x <- direct_lighting.x; r0.y <- direct_lighting.y; r0.w <- direct_lighting.z

#line 138
sample_indexable(texturecube)(float,float,float,float) r4.xyz, r5.xyzx, t5.xyzw, s2
mov r4.xyz, r4.xyzx  // r4.x <- irradiance.x; r4.y <- irradiance.y; r4.z <- irradiance.z

#line 144
nop 
mov r1.w, r1.w

#line 54
mov r5.xyz, -r1.xyzx
add r5.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r1.w, -r1.w
add r1.w, r1.w, l(1.000000)
mov r2.w, l(1.000000)
mul r2.w, r1.w, r2.w
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.w
mul r5.xyz, r1.wwww, r5.xyzx
add r5.xyz, r1.xyzx, r5.xyzx  // r5.x <- <fresnel_schlick return value>.x; r5.y <- <fresnel_schlick return value>.y; r5.z <- <fresnel_schlick return value>.z

#line 144
mov r5.xyz, r5.xyzx  // r5.x <- f.x; r5.y <- f.y; r5.z <- f.z

#line 147
mov r5.xyz, -r5.xyzx
add r5.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r7.xyz, -r5.xyzx
add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r7.xyz, r0.zzzz, r7.xyzx
add r5.xyz, r5.xyzx, r7.xyzx  // r5.x <- kd.x; r5.y <- kd.y; r5.z <- kd.z

#line 150
mul r2.xyz, r2.xyzx, r5.xyzx
mul r2.xyz, r4.xyzx, r2.xyzx  // r2.x <- diffuse_ibl.x; r2.y <- diffuse_ibl.y; r2.z <- diffuse_ibl.z

#line 153
nop 

#line 61
resinfo_indexable(texturecube)(float,float,float,float)_uint r0.z, l(0), t4.xywz
mov r0.z, r0.z  // r0.z <- levels

#line 62
mov r0.z, r0.z  // r0.z <- <query_specular_texture_levels return value>

#line 153
mov r0.z, r0.z  // r0.z <- specular_texture_levels

#line 154
utof r0.z, r0.z
mul r0.z, r0.z, r3.x
sample_l_indexable(texturecube)(float,float,float,float) r4.xyz, r6.xyzx, t4.xyzw, s2, r0.z
mov r4.xyz, r4.xyzx  // r4.x <- specular_irradiance.x; r4.y <- specular_irradiance.y; r4.z <- specular_irradiance.z

#line 157
sample_indexable(texture2d)(float,float,float,float) r3.xy, r3.yxyy, t6.xyzw, s1
mov r3.xy, r3.xyxx  // r3.x <- specular_brdf.x; r3.y <- specular_brdf.y

#line 160
mul r1.xyz, r1.xyzx, r3.xxxx
add r1.xyz, r3.yyyy, r1.xyzx
mul r1.xyz, r4.xyzx, r1.xyzx  // r1.x <- specular_ibl.x; r1.y <- specular_ibl.y; r1.z <- specular_ibl.z

#line 163
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- ambient_lighting.x; r1.y <- ambient_lighting.y; r1.z <- ambient_lighting.z

#line 169
add o0.xyz, r0.xywx, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 172 instruction slots used
